package lane;
import java.awt.Color;
import java.awt.IllegalComponentStateException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import org.knowm.xchart.QuickChart;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;

public class stockrecords extends javax.swing.JFrame {
public static Connection con12;
login.loginpage usr = new login.loginpage();
String loggedin = usr.choice;
JFrame frame = new JFrame("stockout graph");
public static JDialog d = null;
    
    ImageIcon icon=new ImageIcon("lan.jpg");
    public stockrecords() {
        
    try {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(icon.getImage());
        this.setExtendedState(getExtendedState()|JFrame.MAXIMIZED_BOTH);
        
        poptable1();
        poptable2();
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        in5 = new javax.swing.JLabel();
        out1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        stoin = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        stoout = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        search1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        search2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        inn1 = new javax.swing.JLabel();
        inn2 = new javax.swing.JLabel();
        inn3 = new javax.swing.JLabel();
        out3 = new javax.swing.JLabel();
        out4 = new javax.swing.JLabel();
        out5 = new javax.swing.JLabel();
        out = new javax.swing.JLabel();
        out2 = new javax.swing.JLabel();
        inn4 = new javax.swing.JLabel();
        inn5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("stock records");

        jButton1.setText("HOME");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        stoin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "item", "quantity", "specifics", "@ price", "total price", "date collected", "trans id", "state."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(stoin);
        if (stoin.getColumnModel().getColumnCount() > 0) {
            stoin.getColumnModel().getColumn(1).setPreferredWidth(50);
            stoin.getColumnModel().getColumn(5).setPreferredWidth(200);
        }

        stoout.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "item", "quantity", "specifics", "@ price", "total price", "date sold", "trans id", "state."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stoout);
        if (stoout.getColumnModel().getColumnCount() > 0) {
            stoout.getColumnModel().getColumn(1).setResizable(false);
            stoout.getColumnModel().getColumn(1).setPreferredWidth(50);
            stoout.getColumnModel().getColumn(5).setPreferredWidth(200);
        }

        jLabel11.setText("searchbox");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("stock in");

        search1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search1ActionPerformed(evt);
            }
        });
        search1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                search1KeyTyped(evt);
            }
        });

        jLabel9.setText("searchbox");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("stock out");

        search2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        search2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search2KeyReleased(evt);
            }
        });

        jLabel3.setText("total number of items");

        jLabel4.setText("total worth of stock in ksh.");

        jLabel5.setText("total settled transactions");

        jLabel6.setText("total pending transactions");

        jLabel8.setText("total number of items");

        jLabel12.setText("total worth of sold goods");

        jLabel13.setText("total settled trans");

        jLabel15.setText("total pending trans");

        jLabel7.setText("final networth of stock ");

        jButton3.setText("graphical data");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel10.setText("final worth of sold goods");

        inn1.setText("inn1");

        inn2.setText("inn2");

        inn3.setText("inn3");

        out3.setText("out3");

        out4.setText("out4");

        out5.setText("out5");

        out2.setText("out2");

        inn4.setText("inn4");

        inn5.setText("out5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(inn1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inn2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(87, 87, 87)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(inn3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inn4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inn5, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(search1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(out, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(out2, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(out3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(out5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(out4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(inn3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(out3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(out, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inn1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(out2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(out4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(inn2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(inn4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(out5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inn5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("stock tables.", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(in5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151)
                .addComponent(out1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(out1)
                .addGap(10, 10, 10)
                .addComponent(in5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    frame.dispose();
    if (d != null){
        d.dispose();
    }
        try{    
        int rowc1 =  stoin.getRowCount();
        double[] xDa = new double[rowc1];
        double[] yDa = new double[rowc1];
        int rowc2 =  stoout.getRowCount();
        double[] xDa1 = new double[rowc2];
        double[] yDa1 = new double[rowc2];
        for(int i = 0; i<rowc1 ; i++ ){
            xDa[i] = Integer.parseInt(stoin.getValueAt(i,6).toString());
            yDa[i] = Integer.parseInt(stoin.getValueAt(i,1).toString());
        }
        for(int i = 0; i<rowc2 ; i++ ){
            xDa1[i] = Integer.parseInt(stoout.getValueAt(i,6).toString());
            yDa1[i] = Integer.parseInt(stoout.getValueAt(i,1).toString());
        }
        XYChart chart = QuickChart.getChart("stock in graph","transction id","number of items bougt",null,xDa,yDa);
        XYChart chart2 = QuickChart.getChart("stock out graph","transaction id","number of items sold",null,xDa1,yDa1);
    try{
        frame.setUndecorated(true);
    }catch(IllegalComponentStateException e){
        frame.dispose();
        d.dispose();
        new lane.stockrecords().frame.setVisible(true);
    }
        frame.setLayout(null);
        frame.setSize(190,110);
        frame.setLocationRelativeTo(null);
        frame.getContentPane().setBackground(Color.green);
        JButton click = new JButton("check stock in graph");
        click.setBounds(10, 20, 170, 20);
        JButton click2 = new JButton("check stock out graph");
        click2.setBounds(10, 50, 170, 20);
        JButton back = new JButton("back");
        back.setBounds(10, 80, 170, 20);
        back.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
            }
        });
        click.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    displayChart(frame,chart);
                } catch (InterruptedException ex) {
                    Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        click2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    displayChart(frame,chart2);
                } catch (InterruptedException ex) {
                    Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        frame.add(click);
        frame.add(click2);
        frame.add(back);
        frame.setVisible(true);
    }catch(NullPointerException ex){
        JOptionPane.showMessageDialog(this, "no data available");
    }catch(IllegalArgumentException ex){
        int rowc1 =  stoin.getRowCount();
        int rowc2 =  stoout.getRowCount();
        double[] xDa = new double[rowc1];
        double[] yDa = new double[rowc1];
        double[] xDa1 = new double[rowc2];
        double[] yDa1 = new double[rowc2];
        if(rowc1>=1){
            for(int i = 0; i<rowc1 ; i++ ){
            xDa[i] = Integer.parseInt(stoin.getValueAt(i,6).toString());
            yDa[i] = Integer.parseInt(stoin.getValueAt(i,1).toString());
            XYChart chart = QuickChart.getChart("stock in graph","index","goods bougt",null,xDa,yDa);
                try {
                    displayChart(frame,chart);
                } catch (InterruptedException ex1) {
                    Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex1);
                }
        }
        }
        else if(rowc2>=1){
            for(int i = 0; i<rowc2 ; i++ ){
            xDa1[i] = Integer.parseInt(stoout.getValueAt(i,6).toString());
            yDa1[i] = Integer.parseInt(stoout.getValueAt(i,1).toString());
            XYChart chart3 = QuickChart.getChart("stock out graph","index","goods sold",null,xDa1,yDa1);
                try {
                    displayChart(frame,chart3);
                } catch (InterruptedException ex1) {
                    Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex1);
                }
        }
        }else{
            JOptionPane.showMessageDialog(this, "no records pressent from stock data.");
        }
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    public static void displayChart(JFrame frame, XYChart chart) throws InterruptedException {
        
        XChartPanel<XYChart> panel = new XChartPanel<XYChart>(chart);
        d = new JDialog(frame, "stock graph.");
        d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        d.setContentPane(panel);
        d.pack();
        d.setLocationRelativeTo(frame);
        d.setVisible(true);
        
    }
    
    private void search1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search1KeyTyped
        
    }//GEN-LAST:event_search1KeyTyped

    private void search1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search1KeyReleased
        DefaultTableModel m = (DefaultTableModel) stoin.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(m);
        stoin.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search1.getText().trim()));
        
        int rowc1 =  stoin.getRowCount();
        int sum1 = 0;
        for(int i = 0; i<rowc1 ; i++ ){
            sum1 = sum1 + Integer.parseInt(stoin.getValueAt(i,1).toString());
        }
        inn1.setText(Integer.toString(sum1));
        
        int rowc2 =  stoin.getRowCount();
        int sum2 = 0;
        for(int i = 0; i<rowc2 ; i++ ){
            sum2 = sum2 + Integer.parseInt(stoin.getValueAt(i,4).toString());
        }
        inn2.setText(Integer.toString(sum2));
    }//GEN-LAST:event_search1KeyReleased

    private void search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search1ActionPerformed

    private void search2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search2KeyReleased
        DefaultTableModel m = (DefaultTableModel) stoout.getModel();
        TableRowSorter<DefaultTableModel> tr2 = new TableRowSorter<DefaultTableModel>(m);
        stoout.setRowSorter(tr2);
        tr2.setRowFilter(RowFilter.regexFilter(search2.getText().trim()));
        
        int rowc1 =  stoout.getRowCount();
        int sum1 = 0;
        for(int i = 0; i<rowc1 ; i++ ){
            sum1 = sum1 + Integer.parseInt(stoout.getValueAt(i,1).toString());
        }
        out.setText(Integer.toString(sum1));
        
        int rowc2 =  stoout.getRowCount();
        int sum2 = 0;
        for(int i = 0; i<rowc2 ; i++ ){
            sum2 = sum2 + Integer.parseInt(stoout.getValueAt(i,4).toString());
        }
        inn5.setText(Integer.toString(sum2));
    }//GEN-LAST:event_search2KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            this.dispose();
            frame.dispose();
            if(d!=null){
                d.dispose();
            }
            new lane.mainwin_1().setVisible(true);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(stockrecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(stockrecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(stockrecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(stockrecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new stockrecords().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel in5;
    private javax.swing.JLabel inn1;
    private javax.swing.JLabel inn2;
    private javax.swing.JLabel inn3;
    private javax.swing.JLabel inn4;
    private javax.swing.JLabel inn5;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel out;
    private javax.swing.JLabel out1;
    private javax.swing.JLabel out2;
    private javax.swing.JLabel out3;
    private javax.swing.JLabel out4;
    private javax.swing.JLabel out5;
    private javax.swing.JTextField search1;
    private javax.swing.JTextField search2;
    private javax.swing.JTable stoin;
    private javax.swing.JTable stoout;
    // End of variables declaration//GEN-END:variables

    private void poptable1() throws ClassNotFoundException, SQLException {
    try {
        Class.forName("org.sqlite.JDBC");
        DefaultTableModel model = (DefaultTableModel) stoin.getModel();
        model.setRowCount(0);
        
        Connection con = DriverManager.getConnection("jdbc:sqlite:lng.db");
        Statement state11 = con.createStatement();
        ResultSet rs = state11.executeQuery("select * from stockin where transid1 > 0 order by transid1 desc;");
        
        while(rs.next()){
            
            String s0=rs.getString(1);
            String s1=rs.getString(2);
            String s2=rs.getString(3);
            String s3=rs.getString(4);
            String s4=rs.getString(5);
            String s5=rs.getString(6);
            String s6=rs.getString(7);
            String s7=rs.getString(8);
            
            Object[] obj = {s0, s1, s2, s3, s4, s5, s6, s7};
            DefaultTableModel model1 = (DefaultTableModel) stoin.getModel();
            model1.addRow(obj);
            
        }
        con.close();
        rs.close();
        state11.close();
    } catch (SQLException ex) {
        Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
    }
    String debt = null;
    String paid = null;
        Connection con = DriverManager.getConnection("jdbc:sqlite:lng.db");
        Statement state11 = con.createStatement();
        ResultSet rs = state11.executeQuery("select sum(totalprice1) from stockin where state1 = \"paid\" ;");
        while(rs.next()){
        paid = rs.getString(1);
        inn3.setText(paid);
        }
        state11.close();
        rs.close();
    
        Statement state12 = con.createStatement();
        ResultSet rs2 = state12.executeQuery("select sum(totalprice1) from stockin where state1 = \"debt\" ;");
        while(rs2.next()){
        debt = rs2.getString(1);
        inn4.setText(debt);
        }
        state12.close();
        rs2.close();
        if(paid==null){
        paid = "0";
        }
        if(debt==null){
        debt = "0";
        }
        int a1 = Integer.parseInt(paid);
        int a2 = Integer.parseInt(debt);
        
        out2.setText(Integer.toString((a1 - a2)));
        
        int rowc1 =  stoin.getRowCount();
        int sum1 = 0;
        for(int i = 0; i<rowc1 ; i++ ){
            sum1 = sum1 + Integer.parseInt(stoin.getValueAt(i,1).toString());
        }
        inn1.setText(Integer.toString(sum1));
        
        int rowc2 =  stoin.getRowCount();
        int sum2 = 0;
        for(int i = 0; i<rowc2 ; i++ ){
            sum2 = sum2 + Integer.parseInt(stoin.getValueAt(i,4).toString());
        }
        inn2.setText(Integer.toString(sum2));
        
        con.close();
    }
    private void poptable2() throws ClassNotFoundException {
    try {
        try {
            Class.forName("org.sqlite.JDBC");
            DefaultTableModel model = (DefaultTableModel) stoout.getModel();
            model.setRowCount(0);
            
            Connection con = DriverManager.getConnection("jdbc:sqlite:lng.db");
            Statement state11 = con.createStatement();
            ResultSet rs = state11.executeQuery("select * from stockout where transid2 > 0 order by transid2 desc;");
            
            while(rs.next()){
                
                String s0=rs.getString(1);
                String s1=rs.getString(2);
                String s2=rs.getString(3);
                String s3=rs.getString(4);
                String s4=rs.getString(5);
                String s5=rs.getString(6);
                String s6=rs.getString(7);
                String s7=rs.getString(8);
                
                Object[] obj = {s0, s1, s2, s3, s4, s5, s6, s7};
                DefaultTableModel model1 = (DefaultTableModel) stoout.getModel();
                model1.addRow(obj);
                
            }
            con.close();
            rs.close();
            state11.close();
        } catch (SQLException ex) {
            Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
        }
        String debt = null;
        String paid = null;
        Connection con = DriverManager.getConnection("jdbc:sqlite:lng.db");
        Statement state11 = con.createStatement();
        ResultSet rs = state11.executeQuery("select sum(totalprice2) from stockout where state2 = \"paid\" ;");
        while(rs.next()){
            paid = rs.getString(1);
            out3.setText(paid);
        }
        state11.close();
        rs.close();
    
        Statement state12 = con.createStatement();
        ResultSet rs2 = state12.executeQuery("select sum(totalprice2) from stockout;");
        while(rs2.next()){
            debt = rs2.getString(1);
        }
            if(paid==null){
                paid = "0";
            }
            if(debt==null){
                debt = "0";
            }
            String mm = Integer.toString(Integer.parseInt(debt)-Integer.parseInt(paid));
            out4.setText(mm);
        state12.close();
        rs2.close();
        if(paid==null){
            paid = "0";
        }
        if(debt==null){
            debt = "0";
        }
        int a1 = Integer.parseInt(paid);
        int a2 = Integer.parseInt(debt);
        
        out5.setText(Integer.toString((a1 + a2)));
        out2.setText(Integer.toString((a1 + a2)));
        
        int rowc1 =  stoout.getRowCount();
        int sum1 = 0;
        for(int i = 0; i<rowc1 ; i++ ){
            sum1 = sum1 + Integer.parseInt(stoout.getValueAt(i,1).toString());
        }
        out.setText(Integer.toString(sum1));
        
        int rowc2 =  stoout.getRowCount();
        int sum2 = 0;
        for(int i = 0; i<rowc2 ; i++ ){
            sum2 = sum2 + Integer.parseInt(stoout.getValueAt(i,4).toString());
        }
        inn5.setText(Integer.toString(sum2));
        
        con.close();
        
    } catch (SQLException ex) {
        Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
    }
    
    }
    
    private void trans() {
       
    try {
            String response = JOptionPane.showInputDialog("please confirm your action. \n"
                                                        + "records once deleted cannot be recovered\n"
                                                        + "press 'c' to continue any other action\n"
                                                        + "will automatically cancel the operation");
            String ans = response.toUpperCase();
            if (ans.equals("C")){
                Class.forName("org.sqlite.JDBC");
                Connection con1 = DriverManager.getConnection("jdbc:sqlite:lng.db");
                Statement state13 = con1.createStatement();
                state13.execute("delete from stockout;");
                //clr.setEnabled(false);
                DefaultTableModel model = (DefaultTableModel) stoout.getModel();
                model.setRowCount(0); 
                con1.close();
                JOptionPane.showMessageDialog(this, "records cleared succeffully.");
            }else{
                JOptionPane.showMessageDialog(this, "operation cancelled successfully.");
            }
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(stockrecords.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }
}
