/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lane;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.knowm.xchart.QuickChart;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;


/**
 *
 * @author user
 */
public class receivestockhistory extends javax.swing.JFrame {
ImageIcon icon=new ImageIcon("lan.jpg");
login.loginpage usr = new login.loginpage();
JFrame frame = new JFrame("stockout graph");
public static JDialog d = null;
        String loggedin = usr.choice;
    /**
     * Creates new form receivestockhistory
     */
    public receivestockhistory() throws ClassNotFoundException {
        initComponents();
        this.setIconImage(icon.getImage());
        this.setLocationRelativeTo(null);
        this.setExtendedState(getExtendedState()|JFrame.MAXIMIZED_BOTH);
    try {
        poptable3();
    } catch (SQLException ex) {
        Logger.getLogger(receivestockhistory.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        salhist3 = new javax.swing.JTable();
        search1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        from = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        to = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("history of recieved stock.");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("HOME");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        salhist3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "quantity", "specifics", "date", "time", "day", "buying price", "profit", "selling price", "collected by", "sup. phone no.", "trans id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(salhist3);
        if (salhist3.getColumnModel().getColumnCount() > 0) {
            salhist3.getColumnModel().getColumn(3).setPreferredWidth(100);
            salhist3.getColumnModel().getColumn(11).setPreferredWidth(0);
        }

        search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search1ActionPerformed(evt);
            }
        });
        search1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                search1KeyTyped(evt);
            }
        });

        jLabel1.setText("recieved stock history from ");

        from.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        from.setText("-------------------null--------------------");

        jLabel3.setText("to");

        to.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        to.setText("-------------------null--------------------");

        jButton3.setText("graphical data");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("searchbox");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(280, 280, 280)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jLabel2)
                    .addComponent(search1))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            this.dispose();
            frame.dispose();
            if(d!=null){
                d.dispose();
            }
            this.dispose();
            new lane.mainwin_1().setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(receivestockhistory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(receivestockhistory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search1ActionPerformed

    private void search1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search1KeyPressed
        DefaultTableModel m = (DefaultTableModel) salhist3.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(m);
        salhist3.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search1.getText().trim()));
        
        int rowc1 =  salhist3.getRowCount();
        String date = null;
        String date1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                date1 = salhist3.getValueAt(i,3).toString();
            }
            date = salhist3.getValueAt(i,3).toString();
        }
        String time = null;
        String time1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                time1 = salhist3.getValueAt(i,4).toString();
            }
            time = salhist3.getValueAt(i,4).toString();
        }
        String day = null;
        String day1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                day1 = salhist3.getValueAt(i,5).toString();
            }
            day = salhist3.getValueAt(i,5).toString();
        }
        from.setText(date + time + day);
        to.setText(date1 + time1 + day1);
        
    }//GEN-LAST:event_search1KeyPressed

    private void search1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search1KeyTyped
        DefaultTableModel m = (DefaultTableModel) salhist3.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(m);
        salhist3.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search1.getText().trim()));
        
         int rowc1 =  salhist3.getRowCount();
        String date = null;
        String date1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                date1 = salhist3.getValueAt(i,3).toString();
            }
            date = salhist3.getValueAt(i,3).toString();
        }
        String time = null;
        String time1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                time1 = salhist3.getValueAt(i,4).toString();
            }
            time = salhist3.getValueAt(i,4).toString();
        }
        String day = null;
        String day1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                day1 = salhist3.getValueAt(i,5).toString();
            }
            day = salhist3.getValueAt(i,5).toString();
        }
        from.setText(date + time + day);
        to.setText(date1 + time1 + day1);
    }//GEN-LAST:event_search1KeyTyped

    private void search1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search1KeyReleased
        DefaultTableModel m = (DefaultTableModel) salhist3.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(m);
        salhist3.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search1.getText().trim()));
        
         int rowc1 =  salhist3.getRowCount();
        String date = null;
        String date1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                date1 = salhist3.getValueAt(i,3).toString();
            }
            date = salhist3.getValueAt(i,3).toString();
        }
        String time = null;
        String time1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                time1 = salhist3.getValueAt(i,4).toString();
            }
            time = salhist3.getValueAt(i,4).toString();
        }
        String day = null;
        String day1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                day1 = salhist3.getValueAt(i,5).toString();
            }
            day = salhist3.getValueAt(i,5).toString();
        }
        from.setText(date + time + day);
        to.setText(date1 + time1 + day1);
    }//GEN-LAST:event_search1KeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    try{
        frame.dispose();
    if (d != null){
        d.dispose();
    }
        int rowc1 =  salhist3.getRowCount();
        double[] xDa = new double[rowc1];
        double[] yDa = new double[rowc1];
        for(int i = 0; i<rowc1 ; i++ ){
            xDa[i] = Integer.parseInt(salhist3.getValueAt(i,11).toString());
            yDa[i] = Integer.parseInt(salhist3.getValueAt(i,1).toString());
        }
        XYChart chart = QuickChart.getChart("recievestock history graph","transaction id","number of items bought",null,xDa,yDa);
        frame.setUndecorated(true);
        frame.setLayout(null);
        frame.setSize(190,110);
        frame.setLocationRelativeTo(null);
        frame.getContentPane().setBackground(Color.green);
        JButton click = new JButton("history in graph");
        click.setBounds(10, 20, 170, 20);
        JButton back = new JButton("back");
        back.setBounds(10, 80, 170, 20);
        back.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
            }
        });
        click.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayChart(frame,chart);
            }

            
        });
        frame.add(click);
        frame.add(back);
        frame.setVisible(true);
        }catch(IllegalArgumentException e){
        JOptionPane.showMessageDialog(this, "no records pressent!");
    }
    }//GEN-LAST:event_jButton3ActionPerformed
public static void displayChart(JFrame frame, XYChart chart) {
        XChartPanel<XYChart> panel = new XChartPanel<XYChart>(chart);
        d = new JDialog(frame, "stock graph.");
        d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        d.setContentPane(panel);
        d.pack();
        d.setLocationRelativeTo(frame);
        d.setVisible(true);
            }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(receivestockhistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(receivestockhistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(receivestockhistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(receivestockhistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new receivestockhistory().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(receivestockhistory.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel from;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable salhist3;
    private javax.swing.JTextField search1;
    private javax.swing.JLabel to;
    // End of variables declaration//GEN-END:variables

    private void poptable3() throws ClassNotFoundException, SQLException {
    
        Class.forName("org.sqlite.JDBC");
        DefaultTableModel model = (DefaultTableModel) salhist3.getModel();
        model.setRowCount(0);
        
        Connection con = DriverManager.getConnection("jdbc:sqlite:lng.db");
        Statement state11 = con.createStatement();
        ResultSet rs = state11.executeQuery("select * from stockhist where transid3 > 0 order by transid3 desc;");
        
        while(rs.next()){
            
            String s0=rs.getString(1);
            String s1=rs.getString(2);
            String s2=rs.getString(3);
            String s3=rs.getString(4);
            String s4=rs.getString(5);
            String s5=rs.getString(6);
            String s6=rs.getString(7);
            String s7=rs.getString(8);
            String s8=rs.getString(9);
            String s9=rs.getString(10);
            String s11=rs.getString(11);
            String s10=rs.getString(12);
            
            Object[] obj = {s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11};
            DefaultTableModel model1 = (DefaultTableModel) salhist3.getModel();
            model1.addRow(obj);
            
         int rowc1 =  salhist3.getRowCount();
        String date = null;
        String date1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                date1 = salhist3.getValueAt(i,3).toString();
            }
            date = salhist3.getValueAt(i,3).toString();
        }
        String time = null;
        String time1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                time1 = salhist3.getValueAt(i,4).toString();
            }
            time = salhist3.getValueAt(i,4).toString();
        }
        String day = null;
        String day1 = null;
        for(int i = 0; i<rowc1 ; i++ ){
            if (i == 0){
                day1 = salhist3.getValueAt(i,5).toString();
            }
            day = salhist3.getValueAt(i,5).toString();
        }
        from.setText(date + time + day);
        to.setText(date1 + time1 + day1);
        }
        con.close();
        rs.close();
        state11.close();
    
    }
}
